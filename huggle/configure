#!/bin/bash
#  Copyright (c) 2013, Petr Bena
#  All rights reserved.

#  Redistribution and use in source and binary forms, with
#  or without modification, are permitted provided that
#  the following conditions are met:

#  1. Redistributions of source code must retain
#     the above copyright notice, this list 
#     of conditions and the following disclaimer.

#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the distribution.

#  3. Neither the name of Huggle nor the names of its contributors may be used
#     to endorse or promote products derived from this software without specific
#     prior written permission.

#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
#  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
#  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
#  OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
#  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

SKIPCHECKS=0
QMAKE_PATH=qmake
_QMAKE=0
RED=$(tput setaf 1)
WARN=$(tput setaf 3)
GREEN=$(tput setaf 2)
NORMAL=$(tput sgr0)

# first we parse all arguments we got
for var in "$@"
do
    if [ "$var" = "--help" ] || [ "$var" = "-h" ];then
        echo "Configure script for huggle, parameters:"
        echo "=========================================="
        echo " --skip-checks: skip all package checks"
        echo " --no-colors: suppress colors"
        echo " --version: show version"
        echo " --qmake: change path to qmake"
        echo
        echo "Copyright (c) 2013, Petr Bena and Huggle team, licensed under BSD license."
        exit 0
    fi
    if [ "$_QMAKE" = "1" ];then
	QMAKE_PATH="$var"
        continue
    fi
    if [ "$var" = "--no-colors" ];then
        RED=""
        WARN=""
        GREEN=""
        NORMAL=""
    fi
    if [ "$var" = "--qmake" ];then
        _QMAKE=1
        continue
    fi
    if [ "$var" = "--version" ];then
        echo "Huggle configure v 1.0"
        exit 0
    fi
    if [ "$var" = "--skip-checks" ];then
        SKIPCHECKS=1
        continue
    fi
done

ok()
{
    printf '%s%s%s\n' "$GREEN" "[OK]" "$NORMAL"
}

fail()
{
    printf '%s%s%s\n' "$RED" "[FAIL]" "$NORMAL"
}

text()
{
    MSG="$1"
    let COL=$(tput cols)-20-${#MSG}+${#GREEN}+${#NORMAL}
    printf '%s%*s' "$MSG" $COL
}

checkqt()
{
    text "Checking if $1 or $2 is present... "
    if [ "$SKIPCHECKS" = "1" ];then
        echo "SKIP"
        return 0
    fi
    if [ "`apt-cache policy $1 | wc -l`" -gt 4 ];then
        ok
        return 0
    fi

    if [ "`apt-cache policy $2 | wc -l`" -gt 4 ];then
        ok
        return 0
    fi

    fail
    echo "$1 neither $2 is present, use --skip-checks to ignore this"
    echo "or execute apt-get install $1 $2 as root"
    exit 1
}


checkpkg()
{
    text "Checking if $1 is present... "
    if [ "$SKIPCHECKS" == "1" ];then
        echo "SKIP"
        return 0
    fi
    if [ "`apt-cache policy $1 | wc -l`" -gt 2 ];then
        ok
        return 0
    fi
    fail
    echo "$1 is not present, use --skip-checks to ignore this"
    echo "or execute apt-get install $1 as root"
    exit 1
}

echo "Checking all required packages..."


text "Checking for qmake... "
if [ "`which $QMAKE_PATH`" = "" ];then
	fail
	echo "qmake can't be found"
	exit 1
fi

ok

if [ "`which apt-cache`" = "" ];then
	echo $WARN"WARNING: Unable to verify packages, let's just hope they are all installed"$NORMAL
else
	checkpkg "g++"
        checkpkg "make"
        checkqt "libqt4-dbus" "libqt5-dbus"
        checkqt "libqt4-dev" "libqt5-dev"
        checkqt "libqt4-network" "libqt5-network"
        checkqt "libqt4-opengl" "libqt5-opengl"
        checkqt "libqtwebkit5" "libqt4-webkit"
        checkqt "libqtwebkit-dev" "libqt5webkit5-dev"
        checkqt "libqtgui5" "libqtgui4"
        checkqt "libqtcore5" "libqtcore4"
        checkqt "libqt5-xml" "libqt4-xml"
        checkqt "qt4-dev-tools" "qtbase5-dev-tools"
        checkqt "qt5-qmake" "qt4-qmake"
fi

text "Executing update.sh... "
if [ ! -f update.sh ];then
        fail
	echo "update.sh is missing!"
	exit 1
fi

sh update.sh || exit 1

ok
text "Checking if version.txt exist... "
if [ ! -f version.txt ];then
        fail
	echo "Error! unable to create a version file!"
	exit 1
fi

ok
text "Preparing makefile hunker..."

if [ ! -d hunker ];then
    fail
    echo "There is no hunker in here"
    exit 1
fi

cd hunker || exit 1
$QMAKE_PATH || exit 1

ok
text "Building makefile hunker..."

make -s || exit 1
cd ..

ok
text "Creating makefile... "

$QMAKE_PATH || exit 1

ok
text "Executing hunk..."

cd hunker || exit 1
./makefilehunker ../Makefile || exit 1

ok

echo "Everything is ready, you can build huggle by typing"
echo "make"
